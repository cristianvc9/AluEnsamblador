// Definiciones de n√∫meros del 0 al 9
int numeros[11][7] = {
  { 0, 0, 0, 0, 0, 0, 1 },  // 0
  { 1, 0, 0, 1, 1, 1, 1 },  // 1
  { 0, 0, 1, 0, 0, 1, 0 },  // 2
  { 0, 0, 0, 0, 1, 1, 0 },  // 3
  { 1, 0, 0, 1, 1, 0, 0 },  // 4
  { 0, 1, 0, 0, 1, 0, 0 },  // 5
  { 0, 1, 0, 0, 0, 0, 0 },  // 6
  { 0, 0, 1, 1, 1, 1, 0 },  // 7
  { 0, 0, 0, 0, 0, 0, 0 },  // 8
  { 0, 0, 0, 0, 1, 0, 0 },  // 9
  { 1, 1, 1, 1, 1, 1, 0 }   // signo neg
};

int errores[4][7] = {
  { 1, 0, 0, 1, 1, 1, 1 },  // indeterminacion lado izq
  { 1, 0, 0, 0, 0, 1, 0 },  // indeterminacion lado der
  { 0, 0, 1, 1, 1, 0, 0 },  // infinito lado izq
  { 1, 1, 0, 0, 0, 1, 0 }   // infinito lado der
};

void displayError(int numero) {

  int v = 0;

  while (v <= 200) {
    v++;

    if (numero == 11) {  //indeterminacion
      digitalWrite(2, errores[1][0]);
      digitalWrite(3, errores[1][1]);
      digitalWrite(4, errores[1][2]);
      digitalWrite(5, errores[1][3]);
      digitalWrite(6, errores[1][4]);
      digitalWrite(7, errores[1][5]);
      digitalWrite(8, errores[1][6]);
      digitalWrite(9, 1);
      digitalWrite(10, 0);

      delay(50);

      digitalWrite(2, errores[0][0]);
      digitalWrite(3, errores[0][1]);
      digitalWrite(4, errores[0][2]);
      digitalWrite(5, errores[0][3]);
      digitalWrite(6, errores[0][4]);
      digitalWrite(7, errores[0][5]);
      digitalWrite(8, errores[0][6]);
      digitalWrite(10, 1);
      digitalWrite(9, 0);
      delay(40);
    }

    if (numero == 12) {  //inifinito
      digitalWrite(2, errores[2][0]);
      digitalWrite(3, errores[2][1]);
      digitalWrite(4, errores[2][2]);
      digitalWrite(5, errores[2][3]);
      digitalWrite(6, errores[2][4]);
      digitalWrite(7, errores[2][5]);
      digitalWrite(8, errores[2][6]);
      digitalWrite(9, 1);
      digitalWrite(10, 0);

      delay(50);

      digitalWrite(2, errores[3][0]);
      digitalWrite(3, errores[3][1]);
      digitalWrite(4, errores[3][2]);
      digitalWrite(5, errores[3][3]);
      digitalWrite(6, errores[3][4]);
      digitalWrite(7, errores[3][5]);
      digitalWrite(8, errores[3][6]);
      digitalWrite(10, 1);
      digitalWrite(9, 0);
      delay(40);
    }
digitalWrite(11, 1);
  }
}

void displayNumero(int numero) {

  int v = 0;

  while (v <= 200) {
    v++;
    int decenas;
    int unidades;

          if (numero == 133) {  //signo
      digitalWrite(2, numeros[10][0]);
      digitalWrite(3, numeros[10][1]);
      digitalWrite(4, numeros[10][2]);
      digitalWrite(5, numeros[10][3]);
      digitalWrite(6, numeros[10][4]);
      digitalWrite(7, numeros[10][5]);
      digitalWrite(8, numeros[10][6]);
      digitalWrite(10, 1);
      digitalWrite(9, 0);
      digitalWrite(11, 1);
      delay(15);
    }
      decenas = numero / 10;
      unidades = numero % 10;
      if (unidades >= 0 && unidades <= 9 ) {
        digitalWrite(2, numeros[unidades][0]);
        digitalWrite(3, numeros[unidades][1]);
        digitalWrite(4, numeros[unidades][2]);
        digitalWrite(5, numeros[unidades][3]);
        digitalWrite(6, numeros[unidades][4]);
        digitalWrite(7, numeros[unidades][5]);
        digitalWrite(8, numeros[unidades][6]);
        digitalWrite(9, 1);
        digitalWrite(10, 0);
        delay(15);
      }

      if (decenas > 0 && decenas <= 9) {
        digitalWrite(2, numeros[decenas][0]);
        digitalWrite(3, numeros[decenas][1]);
        digitalWrite(4, numeros[decenas][2]);
        digitalWrite(5, numeros[decenas][3]);
        digitalWrite(6, numeros[decenas][4]);
        digitalWrite(7, numeros[decenas][5]);
        digitalWrite(8, numeros[decenas][6]);
        digitalWrite(10, 1);
        digitalWrite(9, 0);
        delay(10);
      }
    
    digitalWrite(9, 0);
    digitalWrite(10, 0);
  }
}

void setup() {

  pinMode(9, OUTPUT);   // Pin activa display de las unidades (derecha)
  pinMode(10, OUTPUT);  // Pin activa display de las decenas (izquierda)
  pinMode(LED_BUILTIN, OUTPUT);

  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(7, OUTPUT);
  pinMode(8, OUTPUT);
  pinMode(11, OUTPUT);

  Serial.begin(9600);
}

void loop() {
  char op = "";  // Lee la letra de la operacion
  bool A = 0, B = 0, C = 0, D = 0;

  while (Serial.available() > 0) {

    op = Serial.read();

    if (op == 's') {
      // SUMA
      A = Serial.read() == '1';  // Convierte a bool
      B = Serial.read() == '1';  // Convierte a bool
      C = Serial.read() == '1';  // Convierte a bool
      D = Serial.read() == '1';  // Convierte a bool

      if (!A && !B && !C && !D) {
        displayNumero(0);
      }
      if ((!C && !D && A && !B) || (!C && !D && !A && B)) {
        displayNumero(1);
      }
      if ((!C && !D && A && B) || (!C && D && !A && !B) || (C && !D && !A && !B)) {
        displayNumero(2);
      }
      if ((!C && D && !A && B) || (!C && D && A && !B) || (C && !D && !A && B) || (C && !D && A && !B)) {
        displayNumero(3);
      }
      if ((!C && D & A && B) || (C && !D && A && B) || (C && D && !A && !B)) {
        displayNumero(4);
      }
      if ((C && D && !A && B) || (C && D && A && !B)) {
        displayNumero(5);
      }
      if (A && B && C && D) {
        displayNumero(6);
      }

      //FIN SUMA
    }

    if (op == 'r') {
      // resta
      A = Serial.read() == '1';  // Convierte a bool
      B = Serial.read() == '1';  // Convierte a bool
      C = Serial.read() == '1';  // Convierte a bool
      D = Serial.read() == '1';  // Convierte a bool

      if ((!C && !A && B) || (!C && D) || (D && !A && B)) {
        displayNumero(133);  //signo
      }
      if ((!C && !D && !A && !B) || (!C && !D && A && B) || (C && D && !A && !B) || (C && D && A && B)) {
        displayNumero(0);
      }
      if ((!D && !A && B) || (!C && A && !B) || (C && !A && B) || (D && A && !B)) {
        displayNumero(1);
      }
      if ((!C && D && !A && !B) || (!C && D && A && B) || (C && !D && !A && !B) || (C && !D && A && B)) {
        displayNumero(2);
      }
      if ((!C && D && !A && B) || (C && !D && A && !B)) {
        displayNumero(3);
      }
    }


    if (op == 'm') {             //multiplicacion
      A = Serial.read() == '1';  // Convierte a bool
      B = Serial.read() == '1';  // Convierte a bool
      C = Serial.read() == '1';  // Convierte a bool
      D = Serial.read() == '1';  // Convierte a bool

      if ((!C && !A) || (!D && !B)) {
        displayNumero(0);
      }
      if (A && B && !C && !D) {
        displayNumero(1);
      }
      if ((!C && D && A && !B) || (C && !D && !A && B)) {
        displayNumero(2);
      }
      if ((!C && D && A && B) || (C && !D && A && B)) {
        displayNumero(3);
      }
      if (!A && !B && C && D) {
        displayNumero(4);
      }
      if ((C && D && !A && B) || (C && D && A && !B)) {
        displayNumero(6);
      }
      if (A && B && C && D) {
        displayNumero(9);
      }
    }

    if (op == 'd') {             //division
      A = Serial.read() == '1';  // Convierte a bool
      B = Serial.read() == '1';  // Convierte a bool
      C = Serial.read() == '1';  // Convierte a bool
      D = Serial.read() == '1';  // Convierte a bool

      if (!A && !B && !C && !D) {  //indeterminacion
        displayError(11);
      }
      if ((!D && A && !B) || (C && !D && !B)) {
        displayError(12);  //infinito
      }
      if ((!C && !A && B) || (!C && D && !A)) {
        displayNumero(0);
      }
      if ((!C && !D && A && B) || (C && D && !A && !B) || (C && D && A && B)) {
        displayNumero(1);
      }
      if (!A && B && C && !D) {
        displayNumero(2);
      }
      if (A && B && C && !D) {
        displayNumero(3);
      }
      if (!A && B && C && D) {  //0.6
        digitalWrite(11, 0);
        displayNumero(6);
      }
      if (A && !B && !C && D) {  //0.5
        digitalWrite(11, 0);
        displayNumero(5);
      }
      if (A && !B && C && D) {  //1.5
        digitalWrite(11, 0);
        displayNumero(15);
      }
      if (A && B && !C && D) {  // 0.3
        digitalWrite(11, 0);
        displayNumero(3);
      }
      digitalWrite(11, 1);
    }


    if (op == 'a') {//and
      A = Serial.read() == '1';  // Convierte a bool
      B = Serial.read() == '1';  // Convierte a bool
      C = Serial.read() == '1';  // Convierte a bool
      D = Serial.read() == '1';  // Convierte a bool

      Serial.println("----AND-----");
      if (B && D && C && A) {
        displayNumero(11);
      } else if (C && A) {
        displayNumero(10);
      } else if (B && D) {
        displayNumero(1);
      } else {
        displayNumero(0);
      }
    }

    if (op == 'x') {//xor
      A = Serial.read() == '1';  // Convierte a bool
      B = Serial.read() == '1';  // Convierte a bool
      C = Serial.read() == '1';  // Convierte a bool
      D = Serial.read() == '1';  // Convierte a bool

      Serial.println("----XOR-----");

      if ((!C && !D && A && B) || (!C && D && A && !B) || (C && !D && !A && B) || (C && D && !A && !B)) {
        displayNumero(11);
      } else if (A ^ C) {
        displayNumero(10);
      } else if (D ^ B) {
        displayNumero(1);
      } else {
        displayNumero(0);
      }
    }

    if (op == 'o') {//or
      A = Serial.read() == '1';  // Convierte a bool
      B = Serial.read() == '1';  // Convierte a bool
      C = Serial.read() == '1';  // Convierte a bool
      D = Serial.read() == '1';  // Convierte a bool

      Serial.println("----OR-----");
      if ((A && B) || (D && A) || (C && B) || (C && D)) {
        displayNumero(11);
      } else if (D || B) {
        displayNumero(1);
      } else if (C || A) {
        displayNumero(10);
      } else {
        displayNumero(0);
      }
    }

    if (op == 'n') {//not
      A = Serial.read() == '1';  // Convierte a bool
      B = Serial.read() == '1';  // Convierte a bool
      C = Serial.read() == '1';  // Convierte a bool
      D = Serial.read() == '1';  // Convierte a bool

      Serial.println("----NOT-----");
      if (!A && !B && !C && !D) {
        displayNumero(11);
      } else if (!C && !A) {
        displayNumero(1);
      } else if (!D && !B) {
        displayNumero(10);
      } else {
        displayNumero(0);
      }
    }

    digitalWrite(11, 1);
  }

digitalWrite(9,0);
digitalWrite(10, 0);

  delay(1000);
}
