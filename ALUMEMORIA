// Definiciones de números del 0 al 9
int numeros[11][7] = {
  { 0, 0, 0, 0, 0, 0, 1 },  // 0
  { 1, 0, 0, 1, 1, 1, 1 },  // 1
  { 0, 0, 1, 0, 0, 1, 0 },  // 2
  { 0, 0, 0, 0, 1, 1, 0 },  // 3
  { 1, 0, 0, 1, 1, 0, 0 },  // 4
  { 0, 1, 0, 0, 1, 0, 0 },  // 5
  { 0, 1, 0, 0, 0, 0, 0 },  // 6
  { 0, 0, 1, 1, 1, 1, 0 },  // 7
  { 0, 0, 0, 0, 0, 0, 0 },  // 8
  { 0, 0, 0, 0, 1, 0, 0 },  // 9
  { 1, 1, 1, 1, 1, 1, 0 }   // signo neg
};

int errores[4][7] = {
  { 1, 0, 0, 1, 1, 1, 1 },  // indeterminacion lado izq
  { 1, 0, 0, 0, 0, 1, 0 },  // indeterminacion lado der
  { 0, 0, 1, 1, 1, 0, 0 },  // infinito lado izq
  { 1, 1, 0, 0, 0, 1, 0 }   // infinito lado der
};

void displayError(int numero) {

  int v = 0;

  while (v <= 200) {
    v++;

    if (numero == 11) {  //indeterminacion
      digitalWrite(2, errores[1][0]);
      digitalWrite(3, errores[1][1]);
      digitalWrite(4, errores[1][2]);
      digitalWrite(5, errores[1][3]);
      digitalWrite(6, errores[1][4]);
      digitalWrite(7, errores[1][5]);
      digitalWrite(8, errores[1][6]);
      digitalWrite(9, 1);
      digitalWrite(10, 0);

      delay(50);

      digitalWrite(2, errores[0][0]);
      digitalWrite(3, errores[0][1]);
      digitalWrite(4, errores[0][2]);
      digitalWrite(5, errores[0][3]);
      digitalWrite(6, errores[0][4]);
      digitalWrite(7, errores[0][5]);
      digitalWrite(8, errores[0][6]);
      digitalWrite(10, 1);
      digitalWrite(9, 0);
      delay(40);
    }

    if (numero == 12) {  //inifinito
      digitalWrite(2, errores[2][0]);
      digitalWrite(3, errores[2][1]);
      digitalWrite(4, errores[2][2]);
      digitalWrite(5, errores[2][3]);
      digitalWrite(6, errores[2][4]);
      digitalWrite(7, errores[2][5]);
      digitalWrite(8, errores[2][6]);
      digitalWrite(9, 1);
      digitalWrite(10, 0);

      delay(50);

      digitalWrite(2, errores[3][0]);
      digitalWrite(3, errores[3][1]);
      digitalWrite(4, errores[3][2]);
      digitalWrite(5, errores[3][3]);
      digitalWrite(6, errores[3][4]);
      digitalWrite(7, errores[3][5]);
      digitalWrite(8, errores[3][6]);
      digitalWrite(10, 1);
      digitalWrite(9, 0);
      delay(40);
    }
    digitalWrite(11, 1);
  }
}

void displayNumero(int numero) {

  int v = 0;
  bool signo = false;

  while (v <= 200) {
    v++;
    int decenas;
    int unidades;

    if (numero < 0) {  //signo
      signo = true;
      digitalWrite(2, numeros[10][0]);
      digitalWrite(3, numeros[10][1]);
      digitalWrite(4, numeros[10][2]);
      digitalWrite(5, numeros[10][3]);
      digitalWrite(6, numeros[10][4]);
      digitalWrite(7, numeros[10][5]);
      digitalWrite(8, numeros[10][6]);
      digitalWrite(10, 1);
      digitalWrite(9, 0);
      digitalWrite(11, 1);
      delay(15);
    }

    decenas = abs(numero / 10);
    unidades = abs(numero % 10);

    if (unidades >= 0 && unidades <= 9) {
      digitalWrite(2, numeros[unidades][0]);
      digitalWrite(3, numeros[unidades][1]);
      digitalWrite(4, numeros[unidades][2]);
      digitalWrite(5, numeros[unidades][3]);
      digitalWrite(6, numeros[unidades][4]);
      digitalWrite(7, numeros[unidades][5]);
      digitalWrite(8, numeros[unidades][6]);
      digitalWrite(9, 1);
      digitalWrite(10, 0);
      delay(15);
    }

    if (decenas >= 0 && decenas <= 9 && signo == false) {
      digitalWrite(2, numeros[decenas][0]);
      digitalWrite(3, numeros[decenas][1]);
      digitalWrite(4, numeros[decenas][2]);
      digitalWrite(5, numeros[decenas][3]);
      digitalWrite(6, numeros[decenas][4]);
      digitalWrite(7, numeros[decenas][5]);
      digitalWrite(8, numeros[decenas][6]);
      digitalWrite(10, 1);
      digitalWrite(9, 0);
      delay(10);
    }

    digitalWrite(9, 0);
    digitalWrite(10, 0);
  }
}
#define CAPACIDAD_ARREGLO 4

double resultados[CAPACIDAD_ARREGLO];  // Arreglo para almacenar resultados
int indiceArreglo = 0;                 // Índice para seguir el último resultado almacenado

void agregarResultado(double resultado) {
  resultados[indiceArreglo] = resultado;
  indiceArreglo = (indiceArreglo + 1) % CAPACIDAD_ARREGLO;
}

void mostrarResultados() {
  for (int i = 0; i < CAPACIDAD_ARREGLO; ++i) {
    Serial.print("R [");
    Serial.print(i);
    Serial.print("] : ");
    Serial.println(resultados[i]);
  }
}




void setup() {

  pinMode(9, OUTPUT);   // Pin activa display de las unidades (derecha)
  pinMode(10, OUTPUT);  // Pin activa display de las decenas (izquierda)
  pinMode(LED_BUILTIN, OUTPUT);

  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(7, OUTPUT);
  pinMode(8, OUTPUT);
  pinMode(11, OUTPUT);

  Serial.begin(9600);
}


void loop() {
  char op = "";  // Lee la letra de la operacion
  bool A = 0, B = 0, C = 0, D = 0;
  double n1, n2;
  double res = 0;
  char rp;
  int R[4] = {};
  char regis;
  char respuestaN;
  bool guardar;
  double resDiv;
  bool activaDisplay = false;
  bool activaRegLogicas = false;

  if (Serial.available() > 0) {


    do {
      //pedir numeros
      Serial.println("1. Ingresar el primer numero en Binario, / 2. Escoger alguno de los registros disponibles:");
      Serial.println("-----------------------------------------");
      mostrarResultados();


      while (Serial.available() == 0) {}
      respuestaN = Serial.read();

      if (respuestaN == '2') {
        activaRegLogicas = true;
        activaDisplay = true;
        Serial.println("----------------------------------------------------------");

        Serial.println("QUE REGISTRO DESEAS USAR (0-3)?");
        while (Serial.available() == 0) {}
        regis = Serial.read();

        if (regis == '0') {
          n1 = resultados[0];
        }
        if (regis == '1') {
          n1 = resultados[1];
        }
        if (regis == '2') {
          n1 = resultados[2];
        }
        if (regis == '3') {
          n1 = resultados[3];
        }
      }


      if (respuestaN == '1') {
        Serial.println("----------------------------------------------------------");

        Serial.println("Ingresa el primer numero en bianrio");
        while (Serial.available() == 0) {}
        C = Serial.read() == '1';  // Convierte a bool
        while (Serial.available() == 0) {}
        A = Serial.read() == '1';  // Convierte a bool

        if (!C && !A) {
          n1 = 0;
        }
        if (!C && A) {
          n1 = 1;
        }
        if (C && !A) {
          n1 = 2;
        }
        if (C && A) {
          n1 = 3;
        }
      }


      //numero 2

      Serial.println("1 = Ingresar el segundo numero en Binario");
      Serial.println("2 = Escoger alguno de los registros disponibles");
      Serial.println("----------------------------------------------------------");
      mostrarResultados();


      while (Serial.available() == 0) {}
      respuestaN = Serial.read();

      if (respuestaN == '2') {
        activaRegLogicas = true;
        activaDisplay = true;
        Serial.println("QUE REGISTRO DESEAS USAR (0-3)?");
        while (Serial.available() == 0) {}
        regis = Serial.read();
        if (regis == '0') {
          n2 = resultados[0];
        }
        if (regis == '1') {
          n2 = resultados[1];
        }
        if (regis == '2') {
          n2 = resultados[2];
        }
        if (regis == '3') {
          n2 = resultados[3];
        }
      }


      if (respuestaN == '1') {
        Serial.println("Ingresa el segundo numero en bianrio");
        while (Serial.available() == 0) {}
        D = Serial.read() == '1';  // Convierte a bool
        while (Serial.available() == 0) {}
        B = Serial.read() == '1';  // Convierte a bool


        if (!D && !B) {
          n2 = 0;
        }
        if (!D && B) {
          n2 = 1;
        }
        if (D && !B) {
          n2 = 2;
        }
        if (D && B) {
          n2 = 3;
        }
      }
      //

      Serial.println("Ingrese una letra para realizar una operacion:");
      Serial.println("s = suma");
      Serial.println("r = resta");
      Serial.println("m = multiplicacion");
      Serial.println("d = division");
      Serial.println("a = AND");
      Serial.println("o = OR");
      Serial.println("x = XOR");
      Serial.println("n = NOT");
      while (Serial.available() == 0) {}

      op = Serial.read();

      switch (op) {
        case 's':

          //mostrar el numero en los displays
          res = n1 + n2;

          if (activaDisplay) {
            agregarResultado(res);
          } else {
            displayNumero(res);
            agregarResultado(res);
          }
          break;

        case 'r':

          //mostrar el numero en los displays
          res = n1 - n2;
          if (activaDisplay) {
            agregarResultado(res);
          } else {
            displayNumero(res);
            agregarResultado(res);
          }
          break;

        case 'm':

          //mostrar el numero en los displays
          res = n1 * n2;
          if (activaDisplay) {
            agregarResultado(res);
          } else {
            displayNumero(res);
            agregarResultado(res);
          }

          break;
        case 'd':


          if (n1 == 0 && n2 == 0) {
            Serial.println("INDETERMINACIÓN:");

            displayError(11);

          } else if (n2 == 0) {
            Serial.println("INFINITO");

            displayError(12);
          } else {

            int resDivInt;
            //mostrar el numero en los displays
            resDiv = static_cast<double>(n1) / static_cast<double>(n2);
            resDiv = round(resDiv * 10.0) / 10.0;

            if (resDiv != static_cast<int>(resDiv)) {

              // El número tiene parte decimal
              digitalWrite(11, 0);                        // Haz lo que necesites hacer si tiene parte decimal
              resDivInt = static_cast<int>(resDiv * 10);  // Convertir a entero multiplicando por 10
              displayNumero(resDivInt);
            }

            if (activaDisplay) {
              agregarResultado(resDiv);
            } else if (activaDisplay == false) {
              displayNumero(resDiv);
              agregarResultado(resDiv);
            }
          }
          digitalWrite(11, 1);


          break;

        case 'a':

          //primero se regresan los valores a booleano en cada operacion logica. 
          if (n1 == 11) {
            C = true;
            A = true;
          }

          if (n1 == 10) {
            C = true;
            A = false;
          }


          if (n1 == 1) {
            C = false;
            A = true;
          }


          if (n1 == 0) {
            C = false;
            A = false;
          }


          if (n2 == 11) {
            D = true;
            B = true;
          }

          if (n2 == 10) {
            D = true;
            B = false;
          }


          if (n2 == 1) {
            D = false;
            B = true;
          }


          if (n2 == 0) {
            D = false;
            B = false;
          }



          if (op == 'a') {  //and
            if (B && D && C && A) {
              displayNumero(11);
              agregarResultado(11);
              res = 11;
            } else if (C && A) {
              displayNumero(10);
              agregarResultado(10);
              res = 10;

            } else if (B && D) {
              displayNumero(1);
              agregarResultado(1);
              res = 1;
            } else {
              displayNumero(0);
              agregarResultado(0);
              res = 0;
            }
          }
          break;

        case 'o':

          if (n1 == 11) {
            C = true;
            A = true;
          }

          if (n1 == 10) {
            C = true;
            A = false;
          }


          if (n1 == 1) {
            C = false;
            A = true;
          }


          if (n1 == 0) {
            C = false;
            A = false;
          }




          if (n2 == 11) {
            D = true;
            B = true;
          }

          if (n2 == 10) {
            D = true;
            B = false;
          }


          if (n2 == 1) {
            D = false;
            B = true;
          }


          if (n2 == 0) {
            D = false;
            B = false;
          }



          if ((A && B) || (D && A) || (C && B) || (C && D)) {
            displayNumero(11);
            agregarResultado(11);
            res = 11;
          } else if (D || B) {
            displayNumero(1);
            agregarResultado(1);
            res = 1;
          } else if (C || A) {
            displayNumero(10);
            agregarResultado(10);
            res = 10;
          } else {
            displayNumero(0);
            agregarResultado(0);
            res = 0;
          }
          break;

        case 'x':

          if (n1 == 11) {
            C = true;
            A = true;
          }

          if (n1 == 10) {
            C = true;
            A = false;
          }


          if (n1 == 1) {
            C = false;
            A = true;
          }


          if (n1 == 0) {
            C = false;
            A = false;
          }




          if (n2 == 11) {
            D = true;
            B = true;
          }

          if (n2 == 10) {
            D = true;
            B = false;
          }


          if (n2 == 1) {
            D = false;
            B = true;
          }


          if (n2 == 0) {
            D = false;
            B = false;
          }



          if ((!C && !D && A && B) || (!C && D && A && !B) || (C && !D && !A && B) || (C && D && !A && !B)) {
            displayNumero(11);
            agregarResultado(11);
            res = 11;
          } else if (A ^ C) {
            displayNumero(10);
            agregarResultado(10);
            res = 10;
          } else if (D ^ B) {
            displayNumero(1);
            agregarResultado(1);
            res = 1;
          } else {
            displayNumero(0);
            agregarResultado(0);
            res = 0;
          }

          break;

        case 'n':

          if (n1 == 11) {
            C = true;
            A = true;
          }

          if (n1 == 10) {
            C = true;
            A = false;
          }


          if (n1 == 1) {
            C = false;
            A = true;
          }


          if (n1 == 0) {
            C = false;
            A = false;
          }




          if (n2 == 11) {
            D = true;
            B = true;
          }

          if (n2 == 10) {
            D = true;
            B = false;
          }


          if (n2 == 1) {
            D = false;
            B = true;
          }


          if (n2 == 0) {
            D = false;
            B = false;
          }


          if (!A && !B && !C && !D) {
            displayNumero(11);
            agregarResultado(11);
            res = 11;
          } else if (!C && !A) {
            displayNumero(1);
            agregarResultado(1);
            res = 1;
          } else if (!D && !B) {
            displayNumero(10);
            agregarResultado(10);
            res = 10;
          } else {
            displayNumero(0);
            agregarResultado(0);
            res = 0;
          }
          break;
      }
      Serial.println("----------------------------------------------------------");

      Serial.println("El resultado de la operacion es:");
      Serial.println(res);

      Serial.println("----------------------------------------------------------");

      Serial.println("Desea continuar con mas operaciones? y/n:");
      while (Serial.available() == 0) {}
      rp = Serial.read();
      Serial.println("----------------------------------------------------------");

    } while (rp != 'n');
  }

  digitalWrite(9, 0);
  digitalWrite(10, 0);
  digitalWrite(11, 1);


  delay(1000);
}
